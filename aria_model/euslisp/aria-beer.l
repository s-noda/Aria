
(ros::load-ros-manifest "geometry_msgs")
(ros::load-ros-manifest "sensor_msgs")

(ros::roseus "aria_beer")

(require "aria-interface.l")

(aria-init)
(ros::unsubscribe "/kduino/converted_imu")

(send *robot* :head :neck-p :min-angle -15)
(send *robot* :head :neck-p :max-angle +15)
(send *robot* :head :neck-r :min-angle -15)
(send *robot* :head :neck-r :max-angle +15)
(send *robot* :head :neck-y :min-angle -15)
(send *robot* :head :neck-y :max-angle +15)

(send *robot* :reset-pose)
(send *robot* :newcoords (make-coords))
(defvar *fove-end-coords*
  (send *robot*
	:put
	:fove-end-coords
	(make-cascoords
	 :name :fove-end-coords
	 :coords (make-coords :pos (send *robot* :head :end-coords :worldpos))
	 :parent (send *robot* :head :end-coords :parent))))

(send *robot* :reset-manip-pose)
(send *robot* :newcoords (make-coords))
(defvar *beer-end-coords*
  (send *robot*
	:put
	:beer-end-coords
	(make-cascoords
	 :name :beer-end-coords
	 :coords (make-coords :pos (send *robot* :rarm :end-coords :worldpos))
	 :parent (send *robot* :rarm :end-coords :parent))))

(defvar *beer-zero-coords* (make-coords))
(defvar *beer-zero-coords-calib-flag* t)
(defvar *beer-obj* (make-cylinder 80 200))

(defvar *fove-zero-coords* (make-coords))
(defvar *fove-zero-coords-calib-flag* t)
(defvar *fove-obj* (make-cylinder 80 80))

(defvar *tablet-zero-coords* (make-coords))
(defvar *tablet-zero-coords-calib-flag* t)
(defvar *tablet-obj* (make-cube 30 120 300))

(send *beer-obj* :set-color #F(1 1 0))
(send *fove-obj* :set-color #F(1 0 0))
(send *fove-obj* :set-color #F(0 0 1))
(objects (list *robot* *beer-obj* *fove-obj* *tablet-obj*))

(defvar *base-beer-pose*
  (float-vector 0.0 -1.45573 0.027471 -61.1792 -0.972318 -0.653704 9.32218 -3.00486 -154.84 -15.8 2.4 -98.4 43.2 -36.0 43.2 6.68738 5.8092 1.85949 -0.543847 0.0 0.0 0.0))

;; (defvar *kanpai-flag* 0)
(defvar *mode-id*)
(setq *event-functions*
  (list
   (list
    (cons :event-triger
	  '(lambda (&rest args)
	     (let* ((thre 0.4)
		    (beer-tilt (cadr (car (rpy-angle (send *beer-obj* :worldrot))))))
	       (format t "[kanpai triger] ~A > ~A~%" beer-tilt thre)
	       (> beer-tilt thre)
	       )))
    (cons :event-callback
	  '(lambda (&rest args)
	     (send *robot* :angle-vector (float-vector 0.0 -1.45573 0.027471 -61.1792 -0.972318 -0.653704 9.32218 -3.00486 -154.84 -15.8 10.251 -30.0 -7.89955 8.59526 80.0 6.68738 5.8092 1.85949 -0.543847 0.0 0.0 0.0))
	     (model2real :sleep-time 4000)
	     ;; (unix:sleep 4)
	     ))
    (cons :event-end
	  '(lambda (&rest args)
	     (reset-manip-pose)
	     (model2real :sleep-time 4000)
	     ;; (unix:sleep 4)
	     t) ;; hook
	  )
    )
   (list
    (cons :event-triger '(lambda (&rest args) t))
    (cons :event-callback
	  '(lambda (&rest args)
	     ;; (send *robot* :angle-vector
	     ;; 	   (v+ (scale 0.5 *base-beer-pose*)
	     ;; 	       (scale 0.5 (send *robot* :angle-vector))))
	     (send *robot* :inverse-kinematics
		   (list (send *fove-obj* :copy-worldcoords)
			 (send *beer-obj* :copy-worldcoords))
		   :move-target
		   (list *fove-end-coords* *beer-end-coords*)
		   :link-list
		   (list
		    (send *robot* :link-list (send *fove-end-coords* :parent) (send *robot* :head :root-link))
		    (send *robot* :link-list (send *beer-end-coords* :parent) (send *robot* :rarm :root-link)))
		   :collision-avoidance-link-pair
		   (apply
		    #'append
		    (mapcar
		     #'(lambda (hl)
			 (mapcar
			  #'(lambda (bl) (list hl bl))
			  (cdr (send *robot* :torso :links))))
		     (send *robot* :rarm :links)))
		   :avoid-collision-distance 100
		   :avoid-collision-null-gain 3.
		   :avoid-collision-joint-gain 3.
		   :rotation-axis (list t t)
		   :translation-axis (list nil nil)
		   :stop 5
		   :revert-if-fail nil
		   :debug-view nil)
	     ;;(send *robot* :head :neck-p :joint-angle 0)
	     ;;(send *robot* :head :neck-r :joint-angle 0)
	     ;;(send *robot* :head :neck-y :joint-angle 0)
	     (send *robot* :torso :waist-p :joint-angle 0)
	     (send *robot* :torso :waist-r :joint-angle 0)
	     (send *robot* :torso :waist-y :joint-angle 0)
	     ;;(send-all (send *robot* :rarm :joint-list) :joint-angle 0)
	     (send-all (send *robot* :larm :joint-list) :joint-angle 0)
	     (model2real :sleep-time 1000)
	     ;; (unix:sleep 1)
	     ))
    (cons :event-end '(lambda (&rest args) nil)))
   ))

(defun android-imu-callback
  (msg)
  (format t "[cup-ui-imu-callback]~%")
  (let* ((qv (float-vector
	      (send (send (send msg :pose) :orientation) :w)
	      (send (send (send msg :pose) :orientation) :x)
	      (send (send (send msg :pose) :orientation) :y)
	      (send (send (send msg :pose) :orientation) :z)))
	 (m (quaternion2matrix qv)))
    ;; (setq m (send (make-coords :rpy (list 0 (norm (coerce (car (rpy-angle m)) float-vector)) 0)) :worldrot))
    (cond
     (*beer-zero-coords-calib-flag*
      (setq *beer-zero-coords-calib-flag* nil)
      (setq *beer-zero-coords*
      	    (make-coords
      	     :rpy
      	     (map cons #'*
      		  '(-1 -1 1)
      		  (car (rpy-angle (send (make-coords :rot (transpose m)) :worldrot))))))
      ;;(make-coords :rot (transpose m)))
      ))
    (send *beer-obj* :newcoords
	  (make-coords
	   :pos (copy-seq (send *beer-end-coords* :worldpos))
	   :rot
	   (send
	    (send *beer-zero-coords*
		  :transformation
		  (make-coords
		   :rpy
		   (map cons #'*
			'(-1 -1 1)
			(car (rpy-angle (send (make-coords :rot (transpose m)) :worldrot))))))
	    :worldrot)))
    (send *tablet-obj* :newcoords
	  (send (send *beer-obj* :copy-worldcoords) :translate #F(300 0 0) :local))
    ;; (send *viewer* :draw-objects)
    ;; (cond
    ;;  ((> (print (cadr (car (rpy-angle (send *beer-obj* :worldrot))))) 0.3)
    ;;   (print 'kanpai) (setq *kanpai-flag* 1))
    ;;  ((> *kanpai-flag* 0)
    ;;   (setq *kanpai-flag* 2))
    ;;  (t (setq *kanpai-flag* 0)))
    ))

(defun android-imu-callback2
  (msg)
  (format t "[cup-ui-imu-callback]~%")
  (let* ((qv (float-vector
	      (send (send (send msg :pose) :orientation) :w)
	      (send (send (send msg :pose) :orientation) :x)
	      (send (send (send msg :pose) :orientation) :y)
	      (send (send (send msg :pose) :orientation) :z)))
	 (m (quaternion2matrix qv)))
    ;; (setq m (send (make-coords :rpy (list 0 (norm (coerce (car (rpy-angle m)) float-vector)) 0)) :worldrot))
    (cond
     (*fove-zero-coords-calib-flag*
      (setq *fove-zero-coords-calib-flag* nil)
      (setq *fove-zero-coords*
      	    (make-coords
      	     :rpy
      	     (map cons #'*
      		  '(-1 -1 1)
      		  (car (rpy-angle (send (make-coords :rot (transpose m)) :worldrot))))))
      ;;(make-coords :rot (transpose m)))
      ))
    (send *fove-obj* :newcoords
	  (make-coords
	   :pos (copy-seq (send *fove-end-coords* :worldpos))
	   :rot
	   (send
	    (send *fove-zero-coords*
		  :transformation
		  (make-coords
		   :rpy
		   (map cons #'*
			'(-1 -1 1)
			(car (rpy-angle (send (make-coords :rot (transpose m)) :worldrot))))))
	    :worldrot)))
    (send *tablet-obj* :newcoords
	  (send (send *fove-obj* :copy-worldcoords) :translate #F(300 0 0) :local))
    ;; (send *viewer* :draw-objects)
    ))

(defun cup-ui-imu-callback
  (msg)
  (format t "[cup-ui-imu-callback]~%")
  (let* ((qv (float-vector
	      (send (send msg :orientation) :w)
	      (send (send msg :orientation) :x)
	      (send (send msg :orientation) :y)
	      (send (send msg :orientation) :z)))
	 (m (quaternion2matrix qv)))
    ;; (setq m (send (make-coords :rpy (list 0 (norm (coerce (car (rpy-angle m)) float-vector)) 0)) :worldrot))
    (cond
     (*beer-zero-coords-calib-flag*
      (setq *beer-zero-coords-calib-flag* nil)
      ;;(setq *beer-zero-coords*
	    ;; (make-coords
	    ;;  :rpy
	    ;;  (map cons #'*
	    ;; 	  '(-1 -1 1)
	    ;; 	  (car (rpy-angle (send (make-coords :rot (transpose m)) :worldrot))))))
      (setq *beer-zero-coords* (make-coords))
      ;;(make-coords :rot (transpose m)))
      ))
    (send *beer-obj* :newcoords
	  (make-coords
	   :pos (copy-seq (send *beer-end-coords* :worldpos))
	   :rot
	   (send
	    (send *beer-zero-coords*
		  :transformation
		  (make-coords
		   :rpy
		   (map cons #'*
			'(-1 -1 -1)
			(car (rpy-angle (send (make-coords :rot (transpose m)) :worldrot))))))
	    :worldrot)))
    ;; (send *viewer* :draw-objects)
    ))

(defun fove-imu-callback
  (msg)
  (format t "[fove-imu-callback]~%")
  (let* ((qv (float-vector
	      (send (send msg :orientation) :w)
	      (send (send msg :orientation) :x)
	      (send (send msg :orientation) :y)
	      (send (send msg :orientation) :z)))
	 (m (quaternion2matrix qv)))
    (cond
     (*fove-zero-coords-calib-flag*
      (setq *fove-zero-coords-calib-flag* nil)
      ;; (setq *fove-zero-coords*
      ;; 	    (make-coords
      ;; 	     :rpy
      ;; 	     (let* ((v (car (rpy-angle (send (make-coords :rot (transpose m)) :worldrot)))))
      ;; 	       (float-vector (* -1 (nth 0 v)) (nth 1 v) (nth 2 v)))))
      (setq *beer-zero-coords* (make-coords))
	     ;; (map cons #'*
	     ;; 	  '(-1 1 1)
	     ;; 	  (car (rpy-angle (send (make-coords :rot (transpose m)) :worldrot))))))
      ;;(make-coords :rot (transpose m)))
      ))
    (send *fove-obj* :newcoords
	  (make-coords
	   :pos (copy-seq (send *fove-end-coords* :worldpos))
	   :rot
	   (send
	    (send *fove-zero-coords*
		  :transformation
		  (make-coords
		   :rpy
		   (let* ((v (car (rpy-angle (send (make-coords :rot (transpose m)) :worldrot)))))
		     (float-vector (* 1 (nth 0 v)) (* -1 (nth 2 v)) (nth 1 v)))))
	    :worldrot)))
    ))

(defun calib-callback
  (msg)
  (setq *beer-zero-coords-calib-flag* t)
  (setq *fove-zero-coords-calib-flag* t))

(ros::subscribe "/android_pose/poseStamped"
		geometry_msgs::PoseStamped
		#'android-imu-callback)
(ros::subscribe "/fove/kduino/converted_imu"
		sensor_msgs::imu
		#'fove-imu-callback)
(ros::subscribe "/cup_ui/kduino/converted_imu"
		sensor_msgs::imu
		#'cup-ui-imu-callback)
(ros::subscribe "/aria_beer/request/calib"
		std_msgs::empty
		#'calib-callback)
;; (ros::subscribe "/android_pose/poseStamped"
;;		geometry_msgs::PoseStamped
;;		#'android-pose-callback)


(defun reset-manip-pose
  nil
  (send *robot* :angle-vector (float-vector 0.0 -2.21381 -0.17029 -120.0 -0.071416 4.33423 30.0 -0.598775 0.0 0.89541 0.499902 -120.0 0.049437 2.87301 -30.0 2.09296 -0.348825 0.085145 -1.25797 0.0 0.0 0.0)))

(ros::rate 10)
(do-until-key
 (if (not (ros::ok)) (return-from nil nil))
 (ros::spin-once)
 (ros::sleep)
 ;;
 (let* ((id -1))
   (dolist (f *event-functions*)
     (incf id)
     (cond
      ((funcall (cdr (assoc :event-triger f)))
       (cond
	((and *mode-id*
	      (not (eq *mode-id* id))
	      (< *mode-id* (length *event-functions*))
	      (funcall
	       (cdr (assoc :event-end (nth *mode-id* *event-functions*)))))
	 'hook)
	(t
	 (funcall (cdr (assoc :event-callback f)))))
       (setq *mode-id* id)
       (return-from nil nil)
       ))))
 ;;
 (send *beer-obj* :newcoords
       (send *beer-end-coords* :copy-worldcoords))
 (send *fove-obj* :newcoords
       (send *fove-end-coords* :copy-worldcoords))
 ;;
 (send *viewer* :draw-objects)
 (x::window-main-one)
 ;;
 ;; (model2real :sleep-time 1000)
 )


;; (defun pose-callback
;;   (msg)
;;   (let* ((qv (float-vector
;; 	      (send (send (send msg :pose) :orientation) :w)
;; 	      (send (send (send msg :pose) :orientation) :x)
;; 	      (send (send (send msg :pose) :orientation) :y)
;; 	      (send (send (send msg :pose) :orientation) :z)))
;; 	 (m (quaternion2matrix qv)))
;;     (cond
;;      (*beer-zero-coords-calib-flag*
;;       (setq *beer-zero-coords-calib-flag* nil)
;;       (setq *beer-zero-coords* (make-coords :rot (transpose m)))
;;       ))
;;     (send *beer-obj* :newcoords
;; 	  (send *beer-zero-coords*
;; 		:transformation
;; 		(make-coords :rot (transpose m))))
;;     (send *robot* :inverse-kinematics
;; 	  (send *beer-obj* :copy-worldcoords)
;; 	  :move-target *beer-end-coords*
;; 	  :link-list (send *robot* :link-list (send *robot* :rarm :end-coords :parent)
;; 			   (send *robot* :rarm :root-link))
;; 	  :rotation-axis t
;; 	  :translation-axis nil
;; 	  :stop 10
;; 	  :revert-if-fail nil
;; 	  :debug-view nil)
;;     (send *beer-obj* :newcoords
;; 	  (send *beer-end-coords* :copy-worldcoords))
;;     ))
;; (ros::subscribe "/android_pose/poseStamped"
;; 		geometry_msgs::PoseStamped
;; 		#'pose-callback)
